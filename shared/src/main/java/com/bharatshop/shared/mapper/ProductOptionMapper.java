package com.bharatshop.shared.mapper;

import com.bharatshop.shared.dto.ProductOptionDto;
import com.bharatshop.shared.entity.ProductOption;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.NullValuePropertyMappingStrategy;

import java.util.List;

/**
 * MapStruct mapper for ProductOption entity and DTOs.
 * Provides type-safe mapping between domain objects and DTOs.
 */
@Mapper(
    componentModel = "spring",
    nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE,
    uses = {OptionMapper.class, OptionValueMapper.class}
)
public interface ProductOptionMapper {
    
    /**
     * Maps ProductOption entity to ProductOptionDto.
     */
    @Mapping(target = "option", ignore = true) // Mapped separately to avoid circular references
    @Mapping(target = "optionValues", ignore = true) // Mapped separately
    @Mapping(target = "product", ignore = true) // Mapped separately to avoid circular references
    ProductOptionDto toDto(ProductOption productOption);
    
    /**
     * Maps ProductOptionDto to ProductOption entity.
     */
    @Mapping(target = "id", ignore = true) // Generated by database
    @Mapping(target = "tenantId", ignore = true) // Set by service
    @Mapping(target = "createdAt", ignore = true) // Set by auditing
    @Mapping(target = "updatedAt", ignore = true) // Set by auditing
    @Mapping(target = "deletedAt", ignore = true) // Set by soft delete
    @Mapping(target = "product", ignore = true) // Handled separately
    @Mapping(target = "option", ignore = true) // Handled separately
    ProductOption toEntity(ProductOptionDto productOptionDto);
    
    /**
     * Updates existing ProductOption entity with ProductOptionDto data.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "productId", ignore = true) // Should not be changed after creation
    @Mapping(target = "optionId", ignore = true) // Should not be changed after creation
    @Mapping(target = "tenantId", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "deletedAt", ignore = true)
    @Mapping(target = "product", ignore = true)
    @Mapping(target = "option", ignore = true)
    void updateEntity(ProductOptionDto productOptionDto, @MappingTarget ProductOption productOption);
    
    /**
     * Maps list of ProductOption entities to list of ProductOptionDtos.
     */
    List<ProductOptionDto> toDtoList(List<ProductOption> productOptions);
    
    /**
     * Maps list of ProductOptionDtos to list of ProductOption entities.
     */
    List<ProductOption> toEntityList(List<ProductOptionDto> productOptionDtos);
}