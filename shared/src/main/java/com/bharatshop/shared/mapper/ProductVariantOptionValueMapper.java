package com.bharatshop.shared.mapper;

import com.bharatshop.shared.dto.ProductVariantOptionValueDto;
import com.bharatshop.shared.entity.ProductVariantOptionValue;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.Named;
import org.mapstruct.NullValuePropertyMappingStrategy;

import java.util.List;

/**
 * MapStruct mapper for ProductVariantOptionValue entity and DTOs.
 * Provides type-safe mapping between domain objects and DTOs.
 */
@Mapper(
    componentModel = "spring",
    nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE,
    uses = {OptionMapper.class, OptionValueMapper.class}
)
public interface ProductVariantOptionValueMapper {
    
    /**
     * Maps ProductVariantOptionValue entity to ProductVariantOptionValueDto.
     */
    @Named("toDto")
    @Mapping(target = "variant", ignore = true) // Mapped separately to avoid circular references
    @Mapping(target = "option", ignore = true) // Mapped separately
    @Mapping(target = "optionValue", ignore = true) // Mapped separately
    @Mapping(target = "optionName", ignore = true) // Computed field
    @Mapping(target = "optionValueName", ignore = true) // Computed field
    @Mapping(target = "optionValueDisplayValue", ignore = true) // Computed field
    @Mapping(target = "colorCode", ignore = true) // Computed field
    ProductVariantOptionValueDto toDto(ProductVariantOptionValue productVariantOptionValue);
    
    /**
     * Maps ProductVariantOptionValueDto to ProductVariantOptionValue entity.
     */
    @Mapping(target = "id", ignore = true) // Generated by database
    @Mapping(target = "tenantId", ignore = true) // Set by service
    @Mapping(target = "createdAt", ignore = true) // Set by auditing
    @Mapping(target = "updatedAt", ignore = true) // Set by auditing
    @Mapping(target = "deletedAt", ignore = true) // Set by soft delete
    @Mapping(target = "productVariant", ignore = true) // Handled separately
    @Mapping(target = "option", ignore = true) // Handled separately
    @Mapping(target = "optionValue", ignore = true) // Handled separately
    ProductVariantOptionValue toEntity(ProductVariantOptionValueDto productVariantOptionValueDto);
    
    /**
     * Updates existing ProductVariantOptionValue entity with ProductVariantOptionValueDto data.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "variantId", ignore = true) // Should not be changed after creation
    @Mapping(target = "optionId", ignore = true) // Should not be changed after creation
    @Mapping(target = "optionValueId", ignore = true) // Should not be changed after creation
    @Mapping(target = "tenantId", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "deletedAt", ignore = true)
    @Mapping(target = "productVariant", ignore = true)
    @Mapping(target = "option", ignore = true)
    @Mapping(target = "optionValue", ignore = true)
    void updateEntity(ProductVariantOptionValueDto productVariantOptionValueDto, @MappingTarget ProductVariantOptionValue productVariantOptionValue);
    
    /**
     * Maps list of ProductVariantOptionValue entities to list of ProductVariantOptionValueDtos.
     */
    @Named("toDtoList")
    List<ProductVariantOptionValueDto> toDtoList(List<ProductVariantOptionValue> productVariantOptionValues);
    
    /**
     * Maps list of ProductVariantOptionValueDtos to list of ProductVariantOptionValue entities.
     */
    List<ProductVariantOptionValue> toEntityList(List<ProductVariantOptionValueDto> productVariantOptionValueDtos);
    
    /**
     * Maps ProductVariantOptionValueDto with computed fields for display.
     */
    @Named("toDtoWithComputedFields")
    default ProductVariantOptionValueDto toDtoWithComputedFields(ProductVariantOptionValue entity) {
        ProductVariantOptionValueDto dto = toDto(entity);
        
        // Set computed fields from related entities
        if (entity.getOption() != null) {
            dto.setOptionName(entity.getOption().getName());
        }
        
        if (entity.getOptionValue() != null) {
            dto.setOptionValueName(entity.getOptionValue().getValue());
            dto.setOptionValueDisplayValue(entity.getOptionValue().getDisplayValue());
            dto.setColorCode(entity.getOptionValue().getColorCode());
        }
        
        return dto;
    }
}