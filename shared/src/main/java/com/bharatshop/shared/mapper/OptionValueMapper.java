package com.bharatshop.shared.mapper;

import com.bharatshop.shared.dto.OptionValueDto;
import com.bharatshop.shared.entity.OptionValue;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.NullValuePropertyMappingStrategy;

import java.util.List;

/**
 * MapStruct mapper for OptionValue entity and DTOs.
 * Provides type-safe mapping between domain objects and DTOs.
 */
@Mapper(
    componentModel = "spring",
    nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE
)
public interface OptionValueMapper {
    
    /**
     * Maps OptionValue entity to OptionValueDto.
     */
    @Mapping(target = "option", ignore = true) // Mapped separately to avoid circular references
    @Mapping(target = "variantCount", ignore = true) // Computed field
    OptionValueDto toDto(OptionValue optionValue);
    
    /**
     * Maps OptionValueDto to OptionValue entity.
     */
    @Mapping(target = "id", ignore = true) // Generated by database
    @Mapping(target = "tenantId", ignore = true) // Set by service
    @Mapping(target = "createdAt", ignore = true) // Set by auditing
    @Mapping(target = "updatedAt", ignore = true) // Set by auditing
    @Mapping(target = "deletedAt", ignore = true) // Set by soft delete
    @Mapping(target = "option", ignore = true) // Handled separately
    OptionValue toEntity(OptionValueDto optionValueDto);
    
    /**
     * Updates existing OptionValue entity with OptionValueDto data.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "optionId", ignore = true) // Should not be changed after creation
    @Mapping(target = "tenantId", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "deletedAt", ignore = true)
    @Mapping(target = "option", ignore = true)
    void updateEntity(OptionValueDto optionValueDto, @MappingTarget OptionValue optionValue);
    
    /**
     * Maps list of OptionValue entities to list of OptionValueDtos.
     */
    List<OptionValueDto> toDtoList(List<OptionValue> optionValues);
    
    /**
     * Maps list of OptionValueDtos to list of OptionValue entities.
     */
    List<OptionValue> toEntityList(List<OptionValueDto> optionValueDtos);
}