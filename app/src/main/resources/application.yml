# Default application configuration
spring:
  application:
    name: bharatshop
  profiles:
    active: dev
  main:
    allow-bean-definition-overriding: true
    allow-circular-references: true
  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
      repositories:
        enabled: false  # Disable Redis repositories by default
  
  # Database Configuration
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        use_sql_comments: true
        # Enable Hibernate filters for multi-tenancy
        enable_lazy_load_no_trans: true
    open-in-view: false
  
  # Flyway Configuration - Disabled to use Hibernate auto-generation
  flyway:
    enabled: false
  
  # Email Configuration
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:dummy@example.com}
    password: ${MAIL_PASSWORD:dummy-password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connectiontimeout: 5000
          timeout: 3000
          writetimeout: 5000
  
  # Actuator
  management:
    endpoints:
      web:
        exposure:
          include: health,info,metrics
    endpoint:
      health:
        show-details: always
    health:
      defaults:
        enabled: true
      redis:
        enabled: true  # Enable Redis health indicator now that Redis is running

# Multi-tenancy configuration
app:
  tenant:
    header-name: X-Tenant-ID
    default-tenant: system
    enable-subdomain-resolution: true
  
  # Payment configuration
  payment:
    razorpay:
      key-id: ${RAZORPAY_KEY_ID:rzp_test_1234567890}
      key-secret: ${RAZORPAY_KEY_SECRET:test_secret_key}
      webhook-secret: ${RAZORPAY_WEBHOOK_SECRET:webhook_secret}
      currency: INR

# Razorpay Configuration
razorpay:
  key:
    id: ${RAZORPAY_KEY_ID:rzp_test_1234567890}
    secret: ${RAZORPAY_KEY_SECRET:test_secret_key}
  sandbox: ${RAZORPAY_SANDBOX:true}
  webhook:
    secret: ${RAZORPAY_WEBHOOK_SECRET:webhook_secret}
  
  # Rate limiting configuration
  rate-limit:
    api:
      requests: 100
      window: 1  # 1 minute
    auth:
      requests: 10
      window: 1  # 1 minute
    admin:
      requests: 200
      window: 1  # 1 minute

# AWS S3 Configuration
aws:
  s3:
    access-key: ${AWS_S3_ACCESS_KEY:dummy-access-key}
    secret-key: ${AWS_S3_SECRET_KEY:dummy-secret-key}
    region: ${AWS_S3_REGION:us-east-1}
    endpoint: ${AWS_S3_ENDPOINT:}
    bucket-name: ${AWS_S3_BUCKET_NAME:bharatshop-dev}
    path-style-access: ${AWS_S3_PATH_STYLE_ACCESS:false}

# Webhook Configuration
bharatshop:
  webhooks:
    enabled: ${BHARATSHOP_WEBHOOKS_ENABLED:true}
    secret: ${BHARATSHOP_WEBHOOKS_SECRET:default-webhook-secret}
    timeout: ${BHARATSHOP_WEBHOOKS_TIMEOUT:5000}
    retry:
      max-attempts: ${BHARATSHOP_WEBHOOKS_RETRY_MAX_ATTEMPTS:3}
    endpoints: ${BHARATSHOP_WEBHOOKS_ENDPOINTS:}

  # Monitoring Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  health:
    db:
      enabled: true
    redis:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
    tags:
      application: bharatshop
      environment: ${spring.profiles.active:default}

# Swagger/OpenAPI Configuration
springdoc:
  api-docs:
    path: /api/v3/api-docs
    enabled: true
  swagger-ui:
    path: /api/swagger-ui.html
    enabled: true
    operationsSorter: method
    tagsSorter: alpha
    tryItOutEnabled: true
    filter: true
  show-actuator: true
  group-configs:
    - group: 'public'
      paths-to-match: '/api/public/**'
      display-name: 'Public APIs'
    - group: 'auth'
      paths-to-match: '/api/auth/**'
      display-name: 'Authentication APIs'
    - group: 'admin'
      paths-to-match: '/api/admin/**'
      display-name: 'Admin APIs'
    - group: 'customer'
      paths-to-match: '/api/customer/**'
      display-name: 'Customer APIs'

# Logging
logging:
  level:
    org.hibernate: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    org.hibernate.metamodel: WARN
    org.hibernate.boot: WARN
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} [%X{traceId:-},%X{tenantId:-}] - %msg%n"

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  
  # H2 Database for development
  datasource:
    url: jdbc:h2:mem:bharatshop
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  h2:
    console:
      enabled: true
      path: /h2-console
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true

# Server configuration
server:
  port: 8080

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  
  # MySQL Database for production
  datasource:
    url: jdbc:mysql://localhost:3306/bharatshop?useSSL=false&serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME:bharatshop}
    password: ${DB_PASSWORD:password}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  # Redis Configuration for production
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:0}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

# Server configuration
server:
  port: ${PORT:8080}

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
  
  # H2 Database for testing
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false