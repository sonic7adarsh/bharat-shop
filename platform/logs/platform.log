2025-09-07 22:40:37 [main] INFO  c.b.platform.PlatformApplication - Starting PlatformApplication using Java 17.0.12 with PID 43248 (C:\Users\Adarsh\Downloads\bharatshop\platform\target\classes started by Adarsh in C:\Users\Adarsh\Downloads\bharatshop\platform)
2025-09-07 22:40:37 [main] DEBUG c.b.platform.PlatformApplication - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-09-07 22:40:37 [main] INFO  c.b.platform.PlatformApplication - The following 1 profile is active: "test"
2025-09-07 22:40:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-07 22:40:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-07 22:40:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 263 ms. Found 26 JPA repository interfaces.
2025-09-07 22:40:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-07 22:40:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-07 22:40:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bharatshop.platform.repository.PlatformUserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-07 22:40:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bharatshop.platform.repository.TenantRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-07 22:40:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 0 Redis repository interfaces.
2025-09-07 22:40:40 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-07 22:40:40 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-09-07 22:40:40 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-09-07 22:40:41 [main] INFO  o.a.c.c.C.[.[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-07 22:40:41 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3217 ms
2025-09-07 22:40:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-07 22:40:41 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-09-07 22:40:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-07 22:40:41 [main] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-09-07 22:40:41 [main] DEBUG c.b.s.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-07 22:40:41 [main] DEBUG o.s.w.f.ServerHttpObservationFilter - Filter 'webMvcObservationFilter' configured for use
2025-09-07 22:40:41 [main] DEBUG c.b.s.f.SessionAuthenticationFilter - Filter 'sessionAuthenticationFilter' configured for use
2025-09-07 22:40:41 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-07 22:40:41 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-09-07 22:40:42 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-07 22:40:42 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-07 22:40:42 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-07 22:40:44 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists cart_items cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists carts cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists customer_addresses cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists media_files cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists option_values cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists options cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists order_items cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists pages cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists payment_gateways cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists payments cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists plans cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists product_categories cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists product_images cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists product_options cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists product_variant_option_values cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists product_variants cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists products cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists reservations cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists subscriptions cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists templates cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists tenants cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists user_roles cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists vendors cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists wishlists cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table cart_items (
        quantity integer not null,
        unit_price numeric(10,2) not null,
        cart_id bigint not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        updated_at timestamp(6) not null,
        variant_id bigint,
        primary key (id),
        constraint idx_cart_item_cart_variant unique (cart_id, variant_id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table carts (
        created_at timestamp(6) not null,
        customer_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        tenant_id varchar(255) not null,
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        is_active boolean not null,
        sort_order integer,
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        parent_id bigint,
        updated_at timestamp(6),
        description TEXT,
        name varchar(255) not null,
        slug varchar(255) not null,
        tenant_id varchar(255),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table customer_addresses (
        is_active boolean not null,
        is_default boolean not null,
        created_at timestamp(6) not null,
        customer_id bigint not null,
        id bigint generated by default as identity,
        tenant_id bigint not null,
        updated_at timestamp(6) not null,
        pincode varchar(10) not null,
        phone varchar(15) not null,
        city varchar(100) not null,
        country varchar(100) not null,
        name varchar(100) not null,
        state varchar(100) not null,
        line1 varchar(255) not null,
        line2 varchar(255),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table media_files (
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        size_bytes bigint,
        updated_at timestamp(6),
        content_type varchar(255),
        file_key varchar(255) not null unique,
        original_filename varchar(255),
        status varchar(255) not null check (status in ('PENDING','UPLOADED','PROCESSING','ACTIVE','FAILED','DELETED')),
        tenant_id varchar(255) not null,
        type varchar(255) not null check (type in ('IMAGE','LOGO','BANNER','DOCUMENT','VIDEO','OTHER')),
        url varchar(255) not null,
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table option_values (
        is_active boolean not null,
        sort_order integer not null,
        color_code varchar(7),
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        option_id bigint not null,
        updated_at timestamp(6),
        display_value varchar(100) not null,
        "value" varchar(100) not null,
        tenant_id varchar(255),
        primary key (id),
        constraint uk_option_value_tenant_option_value unique (tenant_id, option_id, "value")
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table options (
        is_active boolean not null,
        is_required boolean not null,
        sort_order integer not null,
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        updated_at timestamp(6),
        display_name varchar(100) not null,
        name varchar(100) not null,
        description varchar(500),
        tenant_id varchar(255),
        type varchar(255) not null check (type in ('TEXT','COLOR','SIZE','MATERIAL','CUSTOM')),
        primary key (id),
        constraint uk_option_tenant_name unique (tenant_id, name)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table order_items (
        discount_amount numeric(10,2),
        price numeric(10,2) not null,
        quantity integer not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        order_id bigint not null,
        product_id bigint not null,
        updated_at timestamp(6) not null,
        variant_id bigint,
        product_image_url varchar(255),
        product_name varchar(255) not null,
        product_sku varchar(255),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        discount_amount numeric(10,2),
        shipping_amount numeric(10,2),
        tax_amount numeric(10,2),
        total_amount numeric(12,2) not null,
        cancelled_at timestamp(6),
        created_at timestamp(6) not null,
        customer_id bigint not null,
        delivered_at timestamp(6),
        id bigint generated by default as identity,
        packed_at timestamp(6),
        shipped_at timestamp(6),
        shipping_address_id bigint,
        tenant_id bigint not null,
        updated_at timestamp(6) not null,
        shipping_pincode varchar(10),
        shipping_phone varchar(20),
        courier_partner varchar(100),
        shipping_city varchar(100),
        shipping_country varchar(100),
        shipping_name varchar(100),
        shipping_state varchar(100),
        tracking_number varchar(100),
        notes varchar(1000),
        order_number varchar(255) not null unique,
        payment_gateway_id varchar(255),
        payment_gateway_order_id varchar(255),
        payment_gateway_payment_id varchar(255),
        payment_gateway_signature varchar(255),
        payment_method varchar(255),
        payment_status varchar(255) not null check (payment_status in ('PENDING','PROCESSING','COMPLETED','FAILED','CANCELLED','REFUNDED','PARTIALLY_REFUNDED')),
        shipping_line1 varchar(255),
        shipping_line2 varchar(255),
        status varchar(255) not null check (status in ('DRAFT','PENDING','CONFIRMED','PACKED','SHIPPED','DELIVERED','CANCELLED','RETURNED')),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table pages (
        active boolean not null,
        published boolean not null,
        sort_order integer,
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        updated_at timestamp(6),
        status varchar(50),
        author varchar(100),
        slug varchar(100) not null,
        template varchar(100),
        meta_title varchar(200),
        title varchar(200) not null,
        excerpt varchar(500),
        featured_image varchar(500),
        meta_description varchar(500),
        meta_keywords varchar(1000),
        content TEXT,
        custom_css TEXT,
        custom_js TEXT,
        layout JSON,
        page_type varchar(255) not null check (page_type in ('STATIC','DYNAMIC','LANDING','LEGAL')),
        seo JSON,
        template_id varchar(255),
        tenant_id varchar(255),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table payment_gateways (
        is_active boolean not null,
        is_test_mode boolean not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        tenant_id bigint not null,
        updated_at timestamp(6) not null,
        callback_url varchar(255),
        currency varchar(255) not null,
        gateway_name varchar(255) not null,
        gateway_type varchar(255) not null check (gateway_type in ('RAZORPAY','PAYU','STRIPE','PAYPAL')),
        key_id varchar(255) not null,
        key_secret varchar(255) not null,
        merchant_id varchar(255),
        webhook_secret varchar(255),
        webhook_url varchar(255),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table payments (
        amount numeric(10,2) not null,
        refund_amount numeric(10,2),
        webhook_verified boolean not null,
        created_at timestamp(6) not null,
        failed_at timestamp(6),
        id bigint generated by default as identity,
        order_id bigint not null,
        paid_at timestamp(6),
        payment_gateway_id bigint not null,
        tenant_id bigint not null,
        updated_at timestamp(6) not null,
        currency varchar(255) not null,
        description varchar(255),
        failure_reason varchar(255),
        gateway_response TEXT,
        method varchar(255) check (method in ('CARD','NETBANKING','WALLET','UPI','EMI','PAYLATER')),
        notes TEXT,
        razorpay_order_id varchar(255) unique,
        razorpay_payment_id varchar(255) unique,
        razorpay_signature varchar(255),
        receipt varchar(255),
        refund_id varchar(255),
        status varchar(255) not null check (status in ('CREATED','AUTHORIZED','CAPTURED','REFUNDED','FAILED','CANCELLED')),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table plans (
        active boolean not null,
        display_order integer,
        duration_days integer not null,
        is_popular boolean,
        price numeric(10,2) not null,
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        updated_at timestamp(6),
        name varchar(100) not null,
        description varchar(500),
        tenant_id varchar(255),
        features json,
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table product_categories (
        category_id bigint,
        product_id bigint not null
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table product_images (
        is_primary boolean,
        sort_order integer not null,
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        media_id bigint not null,
        product_id bigint not null,
        updated_at timestamp(6),
        image_url varchar(500) not null,
        alt_text varchar(255),
        tenant_id varchar(255),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table product_options (
        is_required boolean not null,
        sort_order integer not null,
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        option_id bigint not null,
        product_id bigint not null,
        updated_at timestamp(6),
        tenant_id varchar(255),
        primary key (id),
        constraint uk_product_option_tenant_product_option unique (tenant_id, product_id, option_id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table product_variant_option_values (
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        option_id bigint not null,
        option_value_id bigint not null,
        updated_at timestamp(6),
        variant_id bigint not null,
        tenant_id varchar(255),
        primary key (id),
        constraint uk_pvov_tenant_variant_option unique (tenant_id, variant_id, option_id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table product_variants (
        cost_price numeric(10,2),
        is_default boolean not null,
        price numeric(10,2) not null,
        reserved_stock integer not null,
        sale_price numeric(10,2),
        sort_order integer not null,
        stock integer not null,
        weight numeric(8,3),
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        image_id bigint,
        product_id bigint not null,
        updated_at timestamp(6),
        barcode varchar(100),
        dimensions varchar(100),
        sku varchar(100) not null,
        attributes JSON,
        status varchar(255) not null check (status in ('ACTIVE','INACTIVE','OUT_OF_STOCK','DISCONTINUED')),
        tenant_id varchar(255),
        primary key (id),
        constraint uk_product_variant_tenant_sku unique (tenant_id, sku)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table products (
        price numeric(10,2),
        stock integer,
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        updated_at timestamp(6),
        attributes JSON,
        description TEXT,
        name varchar(255) not null,
        slug varchar(255) not null unique,
        status varchar(255) not null check (status in ('DRAFT','ACTIVE','INACTIVE','OUT_OF_STOCK','DISCONTINUED')),
        tenant_id varchar(255),
        images varchar(255) array,
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table reservations (
        quantity integer not null,
        created_at timestamp(6) not null,
        expires_at timestamp(6) not null,
        id bigint generated by default as identity,
        order_id bigint,
        product_variant_id bigint not null,
        updated_at timestamp(6) not null,
        status varchar(255) not null check (status in ('ACTIVE','COMMITTED','RELEASED')),
        tenant_id varchar(255) not null,
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table subscriptions (
        auto_renew boolean,
        cancelled_at timestamp(6),
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        next_billing_date timestamp(6),
        plan_id bigint not null,
        start_date timestamp(6) not null,
        updated_at timestamp(6),
        vendor_id bigint not null,
        cancelled_reason varchar(255),
        razorpay_order_id varchar(255),
        razorpay_payment_id varchar(255),
        razorpay_subscription_id varchar(255),
        status varchar(255) not null check (status in ('PENDING','ACTIVE','EXPIRED','CANCELLED','SUSPENDED','TRIAL','PAYMENT_FAILED','RENEWAL_PENDING')),
        tenant_id varchar(255),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table templates (
        is_active boolean not null,
        sort_order integer,
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        updated_at timestamp(6),
        category varchar(100),
        preview_image varchar(500),
        config JSON,
        description TEXT,
        name varchar(255) not null,
        tenant_id varchar(255),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table tenants (
        active boolean not null,
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        updated_at timestamp(6),
        code varchar(50) not null unique,
        name varchar(100) not null unique,
        description varchar(500),
        tenant_id varchar(255),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role varchar(255) check (role in ('CUSTOMER','ADMIN','VENDOR','STAFF'))
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table users (
        account_non_expired boolean not null,
        account_non_locked boolean not null,
        credentials_non_expired boolean not null,
        email_verified boolean,
        enabled boolean not null,
        phone_verified boolean,
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        otp_expires_at timestamp(6),
        updated_at timestamp(6),
        address varchar(255),
        city varchar(255),
        country varchar(255),
        email varchar(255) not null unique,
        first_name varchar(255) not null,
        last_name varchar(255) not null,
        last_otp varchar(255),
        password_hash varchar(255) not null,
        phone varchar(255) unique,
        refresh_token varchar(255),
        state varchar(255),
        status varchar(255) not null check (status in ('ACTIVE','INACTIVE','SUSPENDED','PENDING_VERIFICATION')),
        tenant_id varchar(255),
        user_type varchar(255) not null check (user_type in ('CUSTOMER','PLATFORM')),
        zip_code varchar(255),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table vendors (
        is_active boolean not null,
        created_at timestamp(6) not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        updated_at timestamp(6),
        currency varchar(10),
        preferred_language varchar(10),
        logo varchar(500),
        description TEXT,
        domain varchar(255) unique,
        name varchar(255) not null,
        status varchar(255) not null check (status in ('PENDING','ACTIVE','SUSPENDED','INACTIVE')),
        store_name varchar(255) not null,
        subscription_id varchar(255),
        tenant_id varchar(255),
        theme_config JSON,
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create table wishlists (
        added_price numeric(10,2),
        is_active boolean not null,
        price_alert_enabled boolean not null,
        priority integer not null,
        stock_alert_enabled boolean not null,
        created_at timestamp(6) not null,
        customer_id bigint not null,
        deleted_at timestamp(6),
        id bigint generated by default as identity,
        product_id bigint not null,
        updated_at timestamp(6),
        notes varchar(500),
        tenant_id varchar(255),
        primary key (id)
    )
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_cart_item_cart 
       on cart_items (cart_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_cart_item_product 
       on cart_items (product_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_cart_item_variant 
       on cart_items (variant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_cart_customer_tenant 
       on carts (customer_id, tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_cart_tenant 
       on carts (tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_cart_created_at 
       on carts (created_at)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_category_tenant_id 
       on categories (tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_category_slug 
       on categories (slug)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_category_parent_id 
       on categories (parent_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_category_sort_order 
       on categories (sort_order)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_address_customer_tenant 
       on customer_addresses (customer_id, tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_address_tenant 
       on customer_addresses (tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_address_customer 
       on customer_addresses (customer_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_option_value_tenant_id 
       on option_values (tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_option_value_option_id 
       on option_values (option_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_option_value_value 
       on option_values ("value")
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_option_value_tenant_option 
       on option_values (tenant_id, option_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_option_tenant_id 
       on options (tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_option_name 
       on options (name)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_option_tenant_name 
       on options (tenant_id, name)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_item_order 
       on order_items (order_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_item_product 
       on order_items (product_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_item_variant 
       on order_items (variant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_item_order_product 
       on order_items (order_id, product_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_customer_tenant 
       on orders (customer_id, tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_tenant 
       on orders (tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status 
       on orders (status)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_payment_status 
       on orders (payment_status)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_created_at 
       on orders (created_at)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_page_slug 
       on pages (slug)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_page_tenant_slug 
       on pages (tenant_id, slug)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_page_active 
       on pages (active)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_page_published 
       on pages (published)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_page_type 
       on pages (page_type)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_option_tenant_id 
       on product_options (tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_option_product_id 
       on product_options (product_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_option_option_id 
       on product_options (option_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_option_tenant_product 
       on product_options (tenant_id, product_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_pvov_tenant_id 
       on product_variant_option_values (tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_pvov_variant_id 
       on product_variant_option_values (variant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_pvov_option_id 
       on product_variant_option_values (option_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_pvov_option_value_id 
       on product_variant_option_values (option_value_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_pvov_tenant_variant 
       on product_variant_option_values (tenant_id, variant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_pvov_variant_option 
       on product_variant_option_values (variant_id, option_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_variant_tenant_id 
       on product_variants (tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_variant_product_id 
       on product_variants (product_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_variant_sku 
       on product_variants (tenant_id, sku)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_variant_barcode 
       on product_variants (barcode)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_variant_status 
       on product_variants (status)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_variant_tenant_product 
       on product_variants (tenant_id, product_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_tenant_id 
       on products (tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_slug 
       on products (slug)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_status 
       on products (status)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_product_name 
       on products (name)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_reservation_variant 
       on reservations (product_variant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_reservation_order 
       on reservations (order_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_reservation_expires 
       on reservations (expires_at)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_reservation_tenant_variant 
       on reservations (tenant_id, product_variant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_reservation_status_expires 
       on reservations (status, expires_at)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_template_name 
       on templates (name)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_template_tenant_id 
       on templates (tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_tenant_active 
       on tenants (active)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_vendor_name 
       on vendors (name)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_vendor_store_name 
       on vendors (store_name)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_wishlist_customer_tenant 
       on wishlists (customer_id, tenant_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_wishlist_product 
       on wishlists (product_id)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_wishlist_created_at 
       on wishlists (created_at)
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists cart_items 
       add constraint FKpcttvuq4mxppo8sxggjtn5i2c 
       foreign key (cart_id) 
       references carts
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists cart_items 
       add constraint FK1re40cjegsfvw58xrkdp6bac6 
       foreign key (product_id) 
       references products
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists option_values 
       add constraint FKnwvpvk3crgi57dage4rvs0q2s 
       foreign key (option_id) 
       references options
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists order_items 
       add constraint FKbioxgbv59vetrxe0ejfubep1w 
       foreign key (order_id) 
       references orders
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists order_items 
       add constraint FKocimc7dtr037rh4ls4l95nlfi 
       foreign key (product_id) 
       references products
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists payments 
       add constraint FKsg72b95wtfmuek6xmpk76en5v 
       foreign key (payment_gateway_id) 
       references payment_gateways
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists product_categories 
       add constraint FKlda9rad6s180ha3dl1ncsp8n7 
       foreign key (product_id) 
       references products
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists product_images 
       add constraint FKqnq71xsohugpqwf3c9gxmsuy 
       foreign key (product_id) 
       references products
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists product_options 
       add constraint FK8queoth9c1qwfjytil7581p8k 
       foreign key (option_id) 
       references options
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists product_options 
       add constraint FK8vv4f8fru80wxocwgxwsrow61 
       foreign key (product_id) 
       references products
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists product_variant_option_values 
       add constraint FKh1boloq88fvmrteh5x0sjky7o 
       foreign key (option_id) 
       references options
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists product_variant_option_values 
       add constraint FKg7w87ur4mnwbscqi558a03n54 
       foreign key (option_value_id) 
       references option_values
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists product_variant_option_values 
       add constraint FKfdvywhlptn7khrxxw54trnl6l 
       foreign key (variant_id) 
       references product_variants
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists product_variants 
       add constraint FKjuj5yxly48y6cxy7ojmi03lnk 
       foreign key (image_id) 
       references product_images
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists product_variants 
       add constraint FKosqitn4s405cynmhb87lkvuau 
       foreign key (product_id) 
       references products
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists subscriptions 
       add constraint FKb1uf5qnxi6uj95se8ykydntl1 
       foreign key (plan_id) 
       references plans
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2025-09-07 22:40:44 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-07 22:40:44 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-07 22:40:44 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminReservationController' defined in file [C:\Users\Adarsh\Downloads\bharatshop\platform\target\classes\com\bharatshop\platform\controller\AdminReservationController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'reservationService' defined in URL [jar:file:/C:/Users/Adarsh/.m2/repository/com/bharatshop/bharatshop-shared/1.0.0-SNAPSHOT/bharatshop-shared-1.0.0-SNAPSHOT.jar!/com/bharatshop/shared/service/ReservationService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'reservationRepository' defined in com.bharatshop.shared.repository.ReservationRepository defined in @EnableJpaRepositories declared on PlatformApplication: Could not create query for public abstract java.util.List com.bharatshop.shared.repository.ReservationRepository.findByTenantIdAndStatusOrderByCreatedAtDesc(java.lang.Long,com.bharatshop.shared.entity.Reservation$ReservationStatus); Reason: Failed to create query for method public abstract java.util.List com.bharatshop.shared.repository.ReservationRepository.findByTenantIdAndStatusOrderByCreatedAtDesc(java.lang.Long,com.bharatshop.shared.entity.Reservation$ReservationStatus); Cannot compare left expression of type 'java.lang.String' with right expression of type 'java.lang.Long'
2025-09-07 22:40:44 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists cart_items cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists carts cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists customer_addresses cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists media_files cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists option_values cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists options cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists order_items cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists pages cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists payment_gateways cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists payments cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists plans cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists product_categories cascade 
2025-09-07 22:40:44 [main] DEBUG org.hibernate.SQL - 
    drop table if exists product_images cascade 
2025-09-07 22:40:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists product_options cascade 
2025-09-07 22:40:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists product_variant_option_values cascade 
2025-09-07 22:40:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists product_variants cascade 
2025-09-07 22:40:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists products cascade 
2025-09-07 22:40:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists reservations cascade 
2025-09-07 22:40:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists subscriptions cascade 
2025-09-07 22:40:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists templates cascade 
2025-09-07 22:40:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists tenants cascade 
2025-09-07 22:40:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists user_roles cascade 
2025-09-07 22:40:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-09-07 22:40:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists vendors cascade 
2025-09-07 22:40:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists wishlists cascade 
2025-09-07 22:40:45 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-09-07 22:40:45 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-09-07 22:40:45 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-09-07 22:40:45 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-09-07 22:40:45 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminReservationController' defined in file [C:\Users\Adarsh\Downloads\bharatshop\platform\target\classes\com\bharatshop\platform\controller\AdminReservationController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'reservationService' defined in URL [jar:file:/C:/Users/Adarsh/.m2/repository/com/bharatshop/bharatshop-shared/1.0.0-SNAPSHOT/bharatshop-shared-1.0.0-SNAPSHOT.jar!/com/bharatshop/shared/service/ReservationService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'reservationRepository' defined in com.bharatshop.shared.repository.ReservationRepository defined in @EnableJpaRepositories declared on PlatformApplication: Could not create query for public abstract java.util.List com.bharatshop.shared.repository.ReservationRepository.findByTenantIdAndStatusOrderByCreatedAtDesc(java.lang.Long,com.bharatshop.shared.entity.Reservation$ReservationStatus); Reason: Failed to create query for method public abstract java.util.List com.bharatshop.shared.repository.ReservationRepository.findByTenantIdAndStatusOrderByCreatedAtDesc(java.lang.Long,com.bharatshop.shared.entity.Reservation$ReservationStatus); Cannot compare left expression of type 'java.lang.String' with right expression of type 'java.lang.Long'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:802)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:960)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347)
	at com.bharatshop.platform.PlatformApplication.main(PlatformApplication.java:30)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'reservationService' defined in URL [jar:file:/C:/Users/Adarsh/.m2/repository/com/bharatshop/bharatshop-shared/1.0.0-SNAPSHOT/bharatshop-shared-1.0.0-SNAPSHOT.jar!/com/bharatshop/shared/service/ReservationService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'reservationRepository' defined in com.bharatshop.shared.repository.ReservationRepository defined in @EnableJpaRepositories declared on PlatformApplication: Could not create query for public abstract java.util.List com.bharatshop.shared.repository.ReservationRepository.findByTenantIdAndStatusOrderByCreatedAtDesc(java.lang.Long,com.bharatshop.shared.entity.Reservation$ReservationStatus); Reason: Failed to create query for method public abstract java.util.List com.bharatshop.shared.repository.ReservationRepository.findByTenantIdAndStatusOrderByCreatedAtDesc(java.lang.Long,com.bharatshop.shared.entity.Reservation$ReservationStatus); Cannot compare left expression of type 'java.lang.String' with right expression of type 'java.lang.Long'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:802)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'reservationRepository' defined in com.bharatshop.shared.repository.ReservationRepository defined in @EnableJpaRepositories declared on PlatformApplication: Could not create query for public abstract java.util.List com.bharatshop.shared.repository.ReservationRepository.findByTenantIdAndStatusOrderByCreatedAtDesc(java.lang.Long,com.bharatshop.shared.entity.Reservation$ReservationStatus); Reason: Failed to create query for method public abstract java.util.List com.bharatshop.shared.repository.ReservationRepository.findByTenantIdAndStatusOrderByCreatedAtDesc(java.lang.Long,com.bharatshop.shared.entity.Reservation$ReservationStatus); Cannot compare left expression of type 'java.lang.String' with right expression of type 'java.lang.Long'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 33 common frames omitted
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract java.util.List com.bharatshop.shared.repository.ReservationRepository.findByTenantIdAndStatusOrderByCreatedAtDesc(java.lang.Long,com.bharatshop.shared.entity.Reservation$ReservationStatus); Reason: Failed to create query for method public abstract java.util.List com.bharatshop.shared.repository.ReservationRepository.findByTenantIdAndStatusOrderByCreatedAtDesc(java.lang.Long,com.bharatshop.shared.entity.Reservation$ReservationStatus); Cannot compare left expression of type 'java.lang.String' with right expression of type 'java.lang.Long'
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:115)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:99)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:88)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:88)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:357)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:279)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:285)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 44 common frames omitted
Caused by: java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List com.bharatshop.shared.repository.ReservationRepository.findByTenantIdAndStatusOrderByCreatedAtDesc(java.lang.Long,com.bharatshop.shared.entity.Reservation$ReservationStatus); Cannot compare left expression of type 'java.lang.String' with right expression of type 'java.lang.Long'
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:107)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:124)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:258)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:95)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:111)
	... 56 common frames omitted
Caused by: org.hibernate.query.SemanticException: Cannot compare left expression of type 'java.lang.String' with right expression of type 'java.lang.Long'
	at org.hibernate.query.sqm.internal.TypecheckUtil.assertComparable(TypecheckUtil.java:358)
	at org.hibernate.query.sqm.tree.predicate.SqmComparisonPredicate.<init>(SqmComparisonPredicate.java:48)
	at org.hibernate.query.sqm.tree.predicate.SqmComparisonPredicate.<init>(SqmComparisonPredicate.java:34)
	at org.hibernate.query.sqm.internal.SqmCriteriaNodeBuilder.equal(SqmCriteriaNodeBuilder.java:2121)
	at org.hibernate.query.sqm.internal.SqmCriteriaNodeBuilder.equal(SqmCriteriaNodeBuilder.java:192)
	at org.springframework.data.jpa.repository.query.JpaQueryCreator$PredicateBuilder.build(JpaQueryCreator.java:312)
	at org.springframework.data.jpa.repository.query.JpaQueryCreator.toPredicate(JpaQueryCreator.java:210)
	at org.springframework.data.jpa.repository.query.JpaQueryCreator.create(JpaQueryCreator.java:121)
	at org.springframework.data.jpa.repository.query.JpaQueryCreator.create(JpaQueryCreator.java:60)
	at org.springframework.data.repository.query.parser.AbstractQueryCreator.createCriteria(AbstractQueryCreator.java:119)
	at org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery(AbstractQueryCreator.java:95)
	at org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery(AbstractQueryCreator.java:81)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery$QueryPreparer.<init>(PartTreeJpaQuery.java:218)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery$CountQueryPreparer.<init>(PartTreeJpaQuery.java:361)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:102)
	... 60 common frames omitted
